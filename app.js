/*эта запись позволяет дождаться загрузки всего документа и только тогда уже выполнять какие-то действия с эллементами нашего сайта*/
$(function() {

    /* Fixed Header */

    /*console.log("rabotaet!");*/ /*вывод в консоль надписи*/

    let header = $("#header"); /*let - объявить переменную header = селектор нашего эллемента */
    let intro = $("#intro");
    let introH = intro.innerHeight(); 
    
    let scrollPos = $(window).scrollTop(); /* позиция скролла = обращаемся к аншему окну.вызываем метод scrollTop - т.е. скольок мы проскролили от верха страницы*/

    let nav = $("#nav");
    let navToggle = $("#navToggle");

    /* при загрузке страницы будем вызывать эту функцию вместо on('load', function(){}) */
    checkScroll(scrollPos, introH);
    
    /*Чтобы следить за событием скролл нашего окна пишем следующее:*/
    /* $(window)- мы работаем с окном.on(следим за событием scroll - прокрутка  load - загрузка страницы resize - событие на изменение размера окна ), при событии scroll мы хотим выполнять какое-то действие function() {}*/
    $(window).on("scroll resize", function() {

        /*перезаписываем значение переменной при resize*/
        introH = intro.innerHeight();
        /*высота блока intro*/ /*в данном случае мы обращаемся к селектору intro уже через созданную перемемнную intro*/
        /*intro.height - вызываем метод height, который считает высоту без padding*/
        /*intro.innerHeight - вызываем метод height, который считает высоту с padding*/


        /* обновляем нашу переменную scrollPos на текущую позицию скролла */
        /* $(this)- обращаемся к нашему окному $(window), так как сейчас мы находимся внутри этого события. и все обращения через this будут обращаться к этому окну window*/
        scrollPos = $(this).scrollTop();

        /* каждый раз при скролле будем вызывать эту проверку(функцию) */
        checkScroll(scrollPos, introH);
        /*console.log(scrollPos);*/
    }); 


    /* создаем функцию, которую будем вызывать при определенных событиях  */
    function checkScroll(scrollPos, introH) {
           /*если позиция скрола больше чем высота блока интро, то выдаем класс fixed для эл-та header */
           if( scrollPos > introH) {
            header.addClass("fixed"); /* предаем класс элементу header*/
        } else {
            header.removeClass("fixed"); /* иначе наоборот убираем класс fixed из эл-та header*/
        }
    };


    /* Smooth scroll */

    /* делаем выборку эллемента селектор $("") с [атрибутом] data-scroll*/
    $("[data-scroll]").on("click", function(event) {

        /* отменяем стандартное поведение ссылки при клике, для параметра event записываем preventDefault() - отменяет стандартное поведение ссылки, т.е.
        мы нажимаем на ссылку у которой есть атрибут [data-scroll] но тсандартное поведение при клике на ссылку не срабатывает   */
        event.preventDefault();

        /* получаем параметр data-scroll именно того эл-та, который мы кликнули следующим образом:
        заводим переменную для получения id нужного блока = получаем доступ к эллементу по которму мы кликнули.получаем его дата атрибут data("какой атрибут хотим получить: scroll")*/
        let elementID = $(this).data("scroll");

        /* получаем позицию эллемента от верха страницы */
        /* получается вот такой-же селектор $("#header") только создаем его через переменную elementID */
        /* метод offset - отступ эллемента $(elementID), top - сверху */
        let elementOffset = $(elementID).offset().top;

        /* при клике на скролл-эллемент убираем класс show*/
        nav.removeClass("show");


        /* делаем плавный скролл при помощи анимации: метод .animate() */

        $("html, body").animate({

            /* что хотим анимировать(скролл от верха): значение на которое будем скролить нашу страницу  */
            /* -70 - чтобы header не перекрывал сильно блоки*/
            scrollTop: elementOffset - 70

        }, 700 /*указываем сколько секунд ( в милисекунд) будет длится анимация (скорость прокрутки)*/);
    });


    /* Nav Toggle */

    /*let nav = $("#nav");
    let navToggle = $("#navToggle");*/

    /* следим за кликом nsvToggle*/
    navToggle.on("click", function(event) {
        /* делаем отмену стандартного поведения на случай если navToggle будет сделан не через button, а через ссылку link */
        event.preventDefault();

        /* при клике на navToggle выдаем класс навигации/ либо его убираем*/
        /* первый раз нажимае - меню показывается, второй раз нажимаем - скрывается */
        /* для этого используем метод toggleClass("класс который хотим выдать-  в данном случае класс show")*/
        nav.toggleClass("show");
    });


    /* Reviews Slider: https://kenwheeler.github.io/slick/ */
    let slider = $("#reviewsSlider");

    /*$('.multiple-items').slick({
        infinite: true,
        slidesToShow: 3,
        slidesToScroll: 3
    });*/

    /* для нашего эллемента(слайдера) вызываем метод slick({прописываем опции})*/
    slider.slick({
        infinite: true, /*прокрутка -  будут бесконечно скролится слайдеры, т.е. когда эллементы заканчиваются они повторяются заново  */
        slidesToShow: 1, /* сколько мы хотим показывать слайдов  */
        slidesToScroll: 1, /* сколько мы будем скролить слайдов при клике на скролл */
        fade: true, /* чтобы отзывы затемнялись, т.е. один исчезал, а другой появлялся на его месте */
        arrows: false,/* убираем кнопочки */
        dots: true /* будут показываться точки, которые указывают сколько у нас элементов в слайдере  */
    });

   
});